@page "/users"

@using StoreAdmin.Core.Stores

@inject IRepository<User> UserRepository
@inject IRepository<Store> StoreRepository

<PageTitle>Users | Store Admin</PageTitle>

<h1>Users</h1>

<div>
    <a href="/users/create" class="btn btn-primary">Create</a>
</div>

<EditForm Model="criteria" OnValidSubmit="FilterUsers">
    <div class="input-group my-2">
        <InputText id="name" @bind-Value="@criteria.Name" class="form-control" placeholder="Search users" />
        <InputSelect @bind-Value="criteria.StoreId" class="form-control">
            <option value="0">All Stores</option>
            @foreach (var store in stores)
            {
                <option value="@store.Id">@store.Name</option>
            }
        </InputSelect>
        <button type="submit" class="btn btn-secondary">Filter</button>
    </div>
</EditForm>

@if (userModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>IsEnabled</th>
                <th>Store Count</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userModel in userModels.Where(x => x.IsVisible))
            {
                <tr>
                    <td>@userModel.Model.Id</td>
                    <td>@userModel.Model.Name</td>
                    <td>@userModel.Model.EmailAddress</td>
                    <td>@userModel.Model.IsEnabled</td>
                    <td>@userModel.Model.StoreIds.Count()</td>
                    <td><a href="/users/@userModel.Model.Id" class="btn btn-secondary">Edit</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UiModel<User>[]? userModels;
    private UserFilterCriteria criteria = new();
    private Store[] stores = Array.Empty<Store>();

    protected override async Task OnInitializedAsync()
    {
        var users = await UserRepository.ListAsync();
        userModels = users.Select(x => new UiModel<User>(x)).ToArray();
        stores = await StoreRepository.ListAsync();
    }

    private void FilterUsers()
    {
        if (userModels != null)
            foreach (var userModel in userModels)
                userModel.IsVisible = criteria.AppliesTo(userModel.Model);
    }
}
