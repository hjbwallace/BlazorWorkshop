@using StoreAdmin.Core.Stores
@using StoreAdmin.ExampleApp.Stores

@inject IRepository<Store> StoreRepository

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="@User.Name" class="control-label">Name:</label>
        <InputText id="name" @bind-Value="@User.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label for="@User.EmailAddress" class="control-label">Email:</label>
        <InputText id="email" @bind-Value="@User.EmailAddress" class="form-control" />
    </div>

    <div class="form-check form-check-inline" style="width: 200px">
        <InputCheckbox type="checkbox" @bind-Value="@User.IsEnabled" class="form-check-input" />
        <label class="form-check-label" for="@User.IsEnabled">Enabled?</label>
    </div>

    <h5>Stores</h5>

    <EditForm Context="StoreFilter" Model="storeCriteria" OnValidSubmit="FilterStores">
        <div class="input-group my-2">
            <InputText id="name" @bind-Value="@storeCriteria.Name" class="form-control" placeholder="Search stores" />
            <button type="submit" class="btn btn-secondary">Filter</button>
        </div>
    </EditForm>

    <div class="form-group">
        @if (storeModels == null)
        {
            <p><em>Loading Stores...</em></p>
        }
        else if (!storeModels.Any())
        {
            <p><em>No stores found</em></p>
        }
        else
        {
            @foreach (var storeModel in storeModels.Where(x => x.IsVisible))
            {
                <div class="form-check form-check-inline" style="width: 200px">
                    <InputCheckbox type="checkbox" @bind-Value="@storeModel.IsSelected" class="form-check-input" />
                    <label class="form-check-label" for="@storeModel.Model.Name">@storeModel.Model.Name</label>
                </div>
            }
        }
    </div>

    <div>
        <button type="submit" class="btn btn-success">Save</button>
    </div>

</EditForm>

@code {
    private UiModel<Store>[]? storeModels;
    private StoreFilterCriteria storeCriteria = new();

    [Parameter, EditorRequired]
    public User User { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<User> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var stores = await StoreRepository.ListAsync();
        storeModels = stores.Select(s => new UiModel<Store>(s) { IsSelected = User.StoreIds.Contains(s.Id) }).ToArray();
    }

    private async Task OnValidSubmit()
    {
        User.StoreIds = storeModels?.Where(x => x.IsSelected).Select(x => x.Model.Id).ToArray() ?? Array.Empty<int>();
        await OnSubmit.InvokeAsync(User);
    }

    private void FilterStores()
    {
        if (storeModels != null)
            foreach (var storeModel in storeModels)
                storeModel.IsVisible = storeCriteria.AppliesTo(storeModel.Model);
    }
}
