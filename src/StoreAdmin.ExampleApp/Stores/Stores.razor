@page "/stores"

@inject IRepository<Store> StoreRepository

<PageTitle>Stores | Store Admin</PageTitle>

<h1>Stores</h1>

<div>
    <a href="/stores/create" class="btn btn-primary">Create</a>
</div>

<EditForm Model="criteria" OnValidSubmit="FilterStores">
    <div class="input-group my-2">
        <InputText id="name" @bind-Value="@criteria.Name" class="form-control" placeholder="Search stores" />
        <button type="submit" class="btn btn-secondary">Filter</button>
    </div>
</EditForm>

@if (storeModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Address</th>
                <th>IsEnabled</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var storeModel in storeModels.Where(x => x.IsVisible))
            {
                <tr>
                    <td>@storeModel.Model.Id</td>
                    <td>@storeModel.Model.Name</td>
                    <td>@storeModel.Model.EmailAddress</td>
                    <td>@storeModel.Model.Address</td>
                    <td>@storeModel.Model.IsEnabled</td>
                    <td><a href="/stores/@storeModel.Model.Id" class="btn btn-secondary">Edit</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UiModel<Store>[]? storeModels;
    private StoreFilterCriteria criteria = new();

    protected override async Task OnInitializedAsync()
    {
        var stores = await StoreRepository.ListAsync();
        storeModels = stores.Select(x => new UiModel<Store>(x)).ToArray();
    }

    private void FilterStores()
    {
        if (storeModels != null)
            foreach (var storeModel in storeModels)
                storeModel.IsVisible = criteria.AppliesTo(storeModel.Model);
    }
}
